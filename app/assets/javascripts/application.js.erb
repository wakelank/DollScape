// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require snap.svg.js
//= require underscore
//= require backbone
//= require_tree ./models
//= require_tree ./collections
//= require_tree ./views
//= require_tree .

var room1Box, room2Box, room3Box, room4Box;
var topRoom;
var roomArr=[];
var doll_items = [];
var room;


function makeTopRoom(room){
  
  room.transform("t0,0 s0.8")
  x = 0 - room.getBBox().x;
  y = 0 - room.getBBox().y;
  translate = "t" + x + "," + y;
  scale = "s.8";
  topRoom = room;
  room_image.transform(scale + " " + translate);
  roomArr[0] = room;
}

function makeSmallRoom(room, position){

  
  var currentX = room_image.getBBox().x;
  var currentY = room_image.getBBox().y;
  var destX= 1300;
  var destY = 750 - (position *450);
  var scale = "s.25"
  var translate = "t"+(destX - currentX) + "," + (destY-currentY)
  room_image.transform(scale + " " + translate);
  roomArr[position] = room;


}

// Changes XML to JSON
function xmlToJson(xml) {

  // Create the return object
  var obj = {};

  if (xml.nodeType == 1) { // element
    // do attributes
    if (xml.attributes.length > 0) {
      obj["@attributes"] = {};
      for (var j = 0; j < xml.attributes.length; j++) {
        var attribute = xml.attributes.item(j);
        obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
      }
    }
  } else if (xml.nodeType == 3) { // text
    obj = xml.nodeValue;
  }

  // do children
  if (xml.hasChildNodes()) {
    for(var i = 0; i < xml.childNodes.length; i++) {
      var item = xml.childNodes.item(i);
      var nodeName = item.nodeName;
      if (typeof(obj[nodeName]) === "undefined") {
        obj[nodeName] = xmlToJson(item);
      } else {
        if (typeof(obj[nodeName].push) === "undefined") {
          var old = obj[nodeName];
          obj[nodeName] = [];
          obj[nodeName].push(old);
        }
        obj[nodeName].push(xmlToJson(item));
      }
    }
  }
  return obj;
};

